/**
 *  this file will render HTML markup with the container that react hydrates on id='app'
 *  <div id='app' dangerouslySetInnerHTML={{ __html: client }} />
 *
 * */

import React from 'react';
import logger from 'node-color-log';
import ReactDOMServer from 'react-dom/server';
import { StaticRouter, matchPath } from 'react-router-dom';
import Loadable from 'react-loadable';
import { ServerStyleSheet, StyleSheetManager } from 'styled-components';

import serialize from 'serialize-javascript';
import App from '../../shared/components/App';
import routes from '../../shared/routes';
import { getJsFiles } from '../serverRenderingHelpers';

const ssrMiddleware = (req, res, next) => {
  logger.color('yellow').bold().log('requested req.url', req.url);
  //this goes through all routes in application;
  const activeRoute =
    routes.find((route, i) => matchPath(req.url, route)) || {};

  logger.color('yellow').bold().log('activeRoute', activeRoute);

  const promise = activeRoute.fetchInitialData
    ? activeRoute.fetchInitialData(req.path)
    : Promise.resolve();

  promise
    .then((data) => {
      const context = { data };

      // As we are code splitting, we need to find out which chunks
      // the SSR uses so the client can use them. <Loadable.Capture>
      // takes a report prop which is called whenever a chunk is used.
      const modules = [];

      // Create a context for styled-components to insert inline CSS
      const sheet = new ServerStyleSheet();

      logger
        .color('yellow')
        .bold()
        .log('requested req.url in promise response', req.url);

      // Render the part of the app that gets hydrated on the client
      const appHtml = ReactDOMServer.renderToString(
        <>
          {/* styled-components supports concurrent server side rendering, with stylesheet rehydration. 
            The basic idea is that everytime you render your app on the server, 
            you can create a ServerStyleSheet and add a provider to your React tree,
            that accepts styles via a context API.
      
            StyleSheetManager wrapper create context that is the passed to main App component
          */}
          <StyleSheetManager sheet={sheet.instance}>
            <Loadable.Capture report={(moduleName) => modules.push(moduleName)}>
              <StaticRouter location={req.url} context={context}>
                <App />
              </StaticRouter>
            </Loadable.Capture>
          </StyleSheetManager>
        </>
      );

      const BodyContentAndScripts = ({ client, modulesChunks }) => {
        return (
          <body>
            <div id='app' dangerouslySetInnerHTML={{ __html: client }} />
            {getJsFiles(modulesChunks)}
          </body>
        );
      };

      const serverHtml = ReactDOMServer.renderToString(
        <BodyContentAndScripts client={appHtml} modulesChunks={modules} />
      );

      res.send(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>SSR with RR</title>
          <!-- this has been generated by config/client/webpack.dev.config -->
          <script>window.__INITIAL_DATA__ = ${serialize(data)}</script>

          <!-- this will add any css without you doing anything in client -->
          <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
          <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
          <!---->
        </head>
       ${serverHtml}
      </html>
      `);
    })
    .catch(next);
};

export default ssrMiddleware;
