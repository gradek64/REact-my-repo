import React from "react";
import logger from "node-color-log";
import ReactDOMServer from "react-dom/server";
import { StaticRouter, matchPath } from "react-router-dom";
import Loadable from "react-loadable";

import serialize from "serialize-javascript";
import App from "../../shared/components/App";
import routes from "../../shared/routes";
import { getJsFiles } from "../serverRenderingHelpers";

const ssrMiddleware = (req, res, next) => {
  logger.color("yellow").bold().log("requested req.url", req.url);
  //this goes through all routes in application;
  const activeRoute =
    routes.find((route, i) => matchPath(req.url, route)) || {};

  logger.color("yellow").bold().log("activeRoute", activeRoute);

  const promise = activeRoute.fetchInitialData
    ? activeRoute.fetchInitialData(req.path)
    : Promise.resolve();

  promise
    .then((data) => {
      const context = { data };

      // As we are code splitting, we need to find out which chunks
      // the SSR uses so the client can use them. <Loadable.Capture>
      // takes a report prop which is called whenever a chunk is used.
      const modules = [];

      logger
        .color("yellow")
        .bold()
        .log("requested req.url in promise response", req.url);

      // Render the part of the app that gets hydrated on the client
      const appHtml = ReactDOMServer.renderToString(
        <Loadable.Capture report={(moduleName) => modules.push(moduleName)}>
          <StaticRouter location={req.url} context={context}>
            <App />
          </StaticRouter>
        </Loadable.Capture>
      );

      const BodyContentAndScripts = ({ client, modulesChunks }) => {
        return (
          <body>
            <div id="app" dangerouslySetInnerHTML={{ __html: client }} />
            {getJsFiles(modulesChunks)}
          </body>
        );
      };

      const serverHtml = ReactDOMServer.renderToString(
        <BodyContentAndScripts client={appHtml} modulesChunks={modules} />
      );

      res.send(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>SSR with RR</title>
          <!-- this has been generated by config/client/webpack.dev.config -->
          <script>window.__INITIAL_DATA__ = ${serialize(data)}</script>
        </head>
       ${serverHtml}
      </html>
      `);
    })
    .catch(next);
};

export default ssrMiddleware;
